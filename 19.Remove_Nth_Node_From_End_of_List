/**
Given a linked list, remove the nth node from the end of list and return its head.

For example,

   Given linked list: 1->2->3->4->5, and n = 2.

   After removing the second node from the end, the linked list becomes 1->2->3->5.

Note:
Given n will always be valid.
Try to do this in one pass.

思路：运用2个指针，一个q先走n步，另一个p跟着走直到p走到链表末尾为止。
细节：
1、ListNode* 的命名容易忽略出错
2、如果链表只有一个元素，需要特殊处理，检测到直接返回NULL
3、如果是删除第头指针，那么q应该正好为NULL，那么就返回head->next

最好是先creat一个dummy指针指向head.然后不管是只有一个元素的链表还是删除头指针都可以同样处理。但是题目给的结构难以创建dummy。

 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        ListNode* p=head;
        ListNode* q=head;
        int i;
        if( head -> next == NULL )
        {
            return NULL;
        }
        for( i = 0;i < n ;i++ )
        {    
            q = q -> next;
            if( q == NULL )
                return head->next;
        }
        
        while( q && q -> next )
        {
            p = p -> next;
            q = q -> next;
        }
        p -> next = p -> next -> next;
        return head;
    }
};
