public class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int rightmost = 0;
        for (int i = 0; i < n; ++i) {
            if (i <= rightmost) {
                rightmost = Math.max(rightmost, i + nums[i]);
                if (rightmost >= n - 1) {
                    return true;
                }
            }
        }
        return false;
    }
}

// dp
class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        if(n==0) return true;
        int[] dp = new int[n+1];
        dp[0] = nums[0];
        for(int i=1; i<n; i++){
            if(dp[i-1]>=i) dp[i] = Math.max(dp[i-1], nums[i]+i);
            else dp[i] = 0;
        }
        
        //for(int i=0; i<n; i++) System.out.print(dp[i] + " ");

        return dp[n-1]+1 >= n;
    }
}
