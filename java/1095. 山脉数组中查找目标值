/**
 * // This is MountainArray's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface MountainArray {
 *     public int get(int index) {}
 *     public int length() {}
 * }
 */
 
class Solution {
    public int mountainN, mountainLeft, mountainRight, mountainHighindex, mountainHigh;
    
    public int findInMountainArray(int target, MountainArray mountainArr) {
        mountainN = mountainArr.length();
        mountainLeft = mountainArr.get(0);
        mountainRight = mountainArr.get(mountainN-1);
        mountainHighindex = findInMountainHigh(mountainArr, 0, mountainN-1);
        mountainHigh = mountainArr.get(mountainHighindex);
        // Out of index
        if(target < Math.min(mountainLeft, mountainRight) || target > mountainHigh){
            return -1;
        }
        
        int idx = binarySearch(mountainArr, 0, mountainHighindex, target, true);
        return idx!=-1? idx: binarySearch(mountainArr, mountainHighindex+1, mountainN-1, target, false);
    }
    
    public int binarySearch(MountainArray mountainArr, int left, int right, int target, boolean asc){
        while(left <= right){
            int mid = left + (right - left) / 2;
            int midVal = mountainArr.get(mid);
            if(midVal == target){
                return mid;
            }
            if(midVal < target) {
                left = asc? mid + 1: left;
                right = asc? right: mid - 1;
            } else {
                left = asc? left: mid + 1;
                right = asc?  mid - 1: right;
            }

        }
        return -1;
    }
    
    public int findInMountainHigh(MountainArray mountainArr, int left, int right){
        while(left + 1 < right){
            int mid = left + (right - left) / 2;
            if(mountainArr.get(mid) < mountainArr.get(mid+1)){
                left = mid+1;
            }else{
                right = mid;
            }
        }
        
        return mountainArr.get(left) > mountainArr.get(right)? left: right;
    }
}
