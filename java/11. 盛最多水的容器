class Solution {
    /*
    双指针解法：为什么双指针的做法是正确的？
    双指针代表了什么？
    即无论我们怎么移动右指针，得到的容器的容量都小于移动前容器的容量。也就是说，这个左指针对应的数不会作为容器的边界了，那么我     们就可以丢弃这个位置，将左指针向右移动一个位置，此时新的左指针于原先的右指针之间的左右位置，才可能会作为容器的边界。
    */
    public int maxArea(int[] height) {
        int n = height.length;
        if(n<2) return 0;
        int left = 0; int right = n-1;
        int res = 0;
        while(left < right){
            res = Math.max(res, area(height, left, right));
            if(height[left] < height[right]) left++;
            else right--;
        }
        
        return res;
    }
    
    public int area(int[] height, int left, int right){
        return (right - left) * Math.min(height[left], height[right]);
    }
}
