// BFS ,record every path count
class Solution {
public:
    int uniquePaths(int m, int n) {
		// Initialize first row and column to all 1's
        vector<vector<int>> mem(m, vector<int>(n));
        mem[0][0] = 1;
        for (int i = 1; i < m; i++) mem[i][0] = mem[i - 1][0];
        for (int j = 1; j < n; j++) mem[0][j] = mem[0][j - 1];
		
		// Sum each cell with the previous cell. Number in each cell
		// represents how many paths have lead to that cell. So
		// last cell has the value of all the path options.
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                mem[i][j] = mem[i - 1][j] + mem[i][j - 1];
            }
        }
        return mem[m - 1][n - 1];
    }
};

// DFS
class Solution {
public:
    int uniquePaths(int m, int n) {
        if(m<1||n<1) return 0;
        if(m ==1 && n ==1) return 1;
        return uniquePaths(m-1, n) + uniquePaths(m, n-1);
    }
};
