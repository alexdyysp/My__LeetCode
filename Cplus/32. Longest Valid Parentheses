class Solution {
public:
    int longestValidParentheses(string s) {
        stack<int> st;
        int max_len = 0,last = -1;
        for(int i = 0;i<s.size();i++){
            if(s[i]=='(')//a legal char  
                st.push(i);
            else if(st.empty())//new round start count
                last = i;
            else{
                st.pop();
                if(st.empty())//when the stack is empty,calculate the max_len
                    max_len = max(max_len, i - last);
                else{//if on the left of the stack is all '(' like "((()",the two '(' should be delete, so this part code delete rest '('
                    int stsize=st.size();
                    max_len = max(max_len, i - st.top() );
                }
            }
        }
        return max_len;
    }
};
