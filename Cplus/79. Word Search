class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        int m = board.size();
        int n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false)); 
        for (int i = 0; i < m; ++i) 
            for (int j = 0; j < n; ++j) 
                if (dfs(board, word, i, j, 0, visited)) return true; 
        return false;
    }
private:
    bool dfs(vector<vector<char>>& board, string& word, int c, int r, int k, vector<vector<bool>>& visited){
        bool result ;
        if(k == word.size())
            return true;
        if (c < 0 || r < 0 || c >= board.size() || r >= board[0].size())
            return false;
        if (visited[c][r]) 
            return false;  
        if (board[c][r] != word[k]) 
            return false;
        visited[c][r] = true;
        result = dfs(board, word, c - 1, r, k+1,visited) ||  
            dfs(board, word, c + 1, r, k+1, visited) || 
            dfs(board, word, c, r - 1, k+1, visited) || 
            dfs(board, word, c, r + 1, k+1, visited); 
        visited[c][r] = false;
        return result;
    }
};
