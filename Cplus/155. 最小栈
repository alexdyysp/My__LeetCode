class MinStack {
public:
    /** initialize your data structure here. */
    stack<int> s;
    int rec = 0;
    MinStack() {
        
    }
    
    void push(int x) {
        if(s.empty()){
            s.push(x);
            s.push(x);
            rec = 1;
        }else{
            int tmp = s.top();
            s.pop();
            s.push(x);
            if(tmp > x){
                s.push(x);
                rec = 1;
            }
            else if (tmp < x){
                s.push(tmp);
            }
            else if (tmp == x){
                s.push(tmp);
                rec++;
            }
        }
    }
    
    void pop() {
        vector<int> arr;
        int tmpmin = s.top();
        s.pop(); // pop min
        int tmpval = s.top();
        s.pop(); // pop val
        if (tmpmin == tmpval)
            rec--;
        if (rec==0){
            tmpmin = INT_MAX;
            while(!s.empty()){
                arr.push_back(s.top());
                tmpmin = min(tmpmin, s.top());
                s.pop();
            }
            for(int i=arr.size()-1;i>=0;i--)
                s.push(arr[i]);
            rec = 1;
        }
        if(!s.empty()){
            s.push(tmpmin);
        }
        
    }
    
    int top() {
        int tmpmin = s.top();
        s.pop();
        int tmp = s.top();
        s.push(tmpmin);
        return tmp;
    }
    
    int getMin() {
        return s.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
