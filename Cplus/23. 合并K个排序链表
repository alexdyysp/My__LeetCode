/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        int ls = lists.size();
        if(ls==0) return nullptr;
        if(ls==1) return lists[0];
        while(ls != 1) {
            vector<ListNode*> newlists;
            for(int i=0; i<ls/2; i++){
                newlists.push_back(mergeTwoLists(lists[2*i], lists[2*i+1]));
            }
            if(ls%2==1) newlists.push_back(lists.back());
            lists = newlists;
            ls = lists.size();
        }
        
        return lists[0];
    }

private:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* dummy = new ListNode(0);
        ListNode* pre = dummy;
        while(l1 && l2){
            if(l1->val < l2->val) {pre->next = l1; l1=l1->next;}
            else {pre->next = l2; l2=l2->next;}
            pre = pre->next;
        }
        if(l1==nullptr && l2!=nullptr) pre->next = l2;
        if(l1!=nullptr && l2==nullptr) pre->next = l1;
        return dummy->next;
    }
    
};
