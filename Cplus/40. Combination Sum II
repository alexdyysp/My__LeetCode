class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int> path;
        vector<vector<int>> result;
        sort(candidates.begin(), candidates.end());
        dfs(candidates, result, path, target, 0);
        return result;
    }
private:
    void dfs(vector<int>& candidates, vector<vector<int>>& result, vector<int>& path, int target, int start){
        if(target == 0){
            result.push_back(path);
            return;
        }
        int prev = -1;
        for(int i=start; i<candidates.size(); i++){
            if(prev == candidates[i]) continue;
            if(target < candidates[i]) return;
            path.push_back(candidates[i]);
            prev = candidates[i];
            dfs(candidates, result, path, target-candidates[i], i+1);
            path.pop_back();
        }
    }
};
