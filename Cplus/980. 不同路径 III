class Solution {
    vector<vector<int>> path;
public:
    int uniquePathsIII(vector<vector<int>>& grid) {
        if(grid.size()==0) return 0; 
        int step = 1, x = 0, y =0;
        for(int i=0; i<grid.size(); ++i)
            for(int j=0; j<grid[0].size(); ++j)
                if(grid[i][j]==1) x=i, y=j;
                else if(grid[i][j]==0) ++step;
        
        return dfs(grid, x, y, step);
    }
private:
    int dfs(vector<vector<int>>& grid, int x, int y, int step){
        if(x<0 || x>=grid.size() || y<0 || y>=grid[0].size() || grid[x][y]==-1) return 0;
        if(grid[x][y]==2) return step==0?1:0;
        grid[x][y]=-1;
        int res = dfs(grid, x+1, y, step-1) + dfs(grid, x-1, y, step-1) + dfs(grid, x, y+1, step-1) + dfs(grid, x, y-1, step-1);
        grid[x][y]=0;
        return res;
    }
};
