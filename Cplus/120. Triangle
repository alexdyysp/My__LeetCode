// recursion, but time limited exceed
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {        
        int n = triangle.size()-1;
        vector<vector<int>> temp;
        for(int i=0; i<=n; i++){
            vector<int> temp_sub(i+1, -1);
            temp.push_back(temp_sub);
        }
        return solve(triangle, temp, 0, 0, n);
    }
private:
    int solve(vector<vector<int>>& triangle, vector<vector<int>>& temp, int i, int j, int n){
        if(temp[i][j] >= 0) return temp[i][j];
        return temp[i][j] = triangle[i][j] + 
            (i ==n ? 0 : min(solve(triangle, temp, i+1, j, n), solve(triangle, temp, i+1, j+1, n)));
    }
};

// iteration
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {        
        for(int i = triangle.size()-2; i>=0; i--){
            for(int j=0; j<i+1; j++){
                triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1]);
            }
        }
        return triangle[0][0];
    }
};
