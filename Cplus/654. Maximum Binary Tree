/**
构造根最大的二叉树，

 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        return construct(nums, 0, nums.size());
    }
private:
    TreeNode* construct(vector<int>& nums, int l, int r){
        if(l==r) return nullptr;
        int max_index = maxnum(nums, l, r);
        TreeNode* root = new TreeNode(nums[max_index]);
        root->left = construct(nums, l, max_index);
        root->right = construct(nums, max_index+1, r);
        return root;
    }
    int maxnum(vector<int> nums, int l, int r){
        int maxvalue = nums[l];
        int max_index = l;
        for(int i=l+1; i<r; i++)
            if(maxvalue<nums[i]){
                maxvalue = nums[i];
                max_index = i;
            }
        return max_index;
    }
};
