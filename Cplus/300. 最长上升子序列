class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        if(!nums.size()) return 0;
        vector<int> dp(nums.size(),0);
        dp[0] = 1;
        for(int i=1; i<nums.size(); i++){
            int maxdp = dp[i];
            for(int j=0; j<i; j++){
                if(nums[i]>nums[j])
                    maxdp = max(maxdp, dp[j]);
            }
            dp[i] = maxdp + 1;
        }
        //for(auto i:dp)
        //    cout<<i<<" ";
        return *max_element(dp.begin(), dp.end());
    }
};

class Solution {
    /*动态规划+二分查找
    很具小巧思。新建数组 cell，用于保存最长上升子序列。

    对原序列进行遍历，将每位元素二分插入 cell 中。

    如果 cell 中元素都比它小，将它插到最后
    否则，用它覆盖掉比它大的元素中最小的那个。
    总之，思想就是让 cell 中存储比较小的元素。这样，cell 未必是真实的最长上升子序列，但长度是对的。
    */
public:
    int lengthOfLIS(vector<int>& nums) {
        int len = 1, n = (int)nums.size();
        if (n == 0) return 0;
        vector<int> d(n + 1, 0);
        d[len] = nums[0];
        for (int i = 1; i < n; ++i) {
            if (nums[i] > d[len]) d[++len] = nums[i];
            else{
                int l = 1, r = len, pos = 0; // 如果找不到说明所有的数都比 nums[i] 大，此时要更新 d[1]，所以这里将 pos 设为 0
                while (l <= r) {
                    int mid = (l + r) >> 1;
                    if (d[mid] < nums[i]) {
                        pos = mid;
                        l = mid + 1;
                    }
                    else r = mid - 1;
                }
                d[pos + 1] = nums[i];
            }

        }

        return len;
    }
};
