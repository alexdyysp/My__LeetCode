/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        TreeNode *prev,*cur,*node;
        if(!root) return ;
        pair<TreeNode*,TreeNode*> broken={};
        cur = root;
        prev = nullptr;
        while(cur != nullptr){
            if(cur->left!=nullptr){
                node = cur->left;
                while(node->right!=nullptr && node->right!=cur)
                    node = node->right;
                if(node->right==nullptr){//not clusion yet
                    node->right = cur;
                    cur = cur->left;//when building clusion, enter left subtree
                }else{
                    //clusion yet
                    detect(broken,prev,cur);
                    node->right = nullptr;
                    prev = cur;
                    cur = cur->right;//after have built clusion, enter right subtree
                }
            }else{//enter the leftest subtree treenode
                detect(broken,prev,cur);
                //node->right = nullptr;
                prev = cur;
                cur =  cur->right;
            }
        }
        swap(broken.first->val, broken.second->val);
    }
    void detect(pair<TreeNode*, TreeNode*>& broken,TreeNode* prev,TreeNode* cur){
        if(prev!=nullptr && prev->val > cur->val){
            if(broken.first == nullptr)
                broken.first = prev;
            broken.second = cur;
        }
    }
