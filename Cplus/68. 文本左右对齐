
class Solution {
public:
vector<string> fullJustify(vector<string>& words, int maxWidth) {
    vector<string>res;
    int i=0;
    while(i<words.size()){
        int residue_wid=0;
        int begin=i;
        while(i<words.size() && residue_wid+words[i].size()<=maxWidth){//每一行添加最多的单词。
            residue_wid+=words[i].size()+1;
            ++i;
        }
        if(i==words.size()){//判断是否是最后一行。
            res.push_back(packagestring(words,begin,i-1,residue_wid-1,maxWidth,false));
            break;
        }
        res.push_back(packagestring(words,begin,i-1,residue_wid-1,maxWidth,true));
    }
    return res;
}
 
string packagestring(vector<string>& words, int starter, int ender, int strlen,int maxWidth,bool tail){
    string res="";
    if(tail && starter<ender){
        int cnt=ender-starter;//代表有几个空格位(空格个数等于字符串数-1)
        int blk=(maxWidth-strlen)/cnt+1;//每个位置最少放几个空格
        string spc=string(blk,' ');//n个空格
        int ofst=(maxWidth-strlen)%cnt;//剩下的空格。
        for(int i=starter;i<ender;++i)//左边要比右边多，但是不需要是绝对大于，直接从左往右都分配一个。
        {
            res+=words[i]+spc;//加上最少空格
            if(i-starter<ofst)res+=' ';//还有剩下的空格就加上。
        }
        res+=words[ender];
    }
    else//只有一个字符串或者最后字符串，方法是一样的，都是左对齐。
        {
        string spc=string(maxWidth-strlen,' ');//每个空格位只放一个空格，剩下的全部添加到后面。
        for(int i=starter;i<ender;++i){
            res+=words[i]+' ';
        }
        res+=words[ender]+spc;//直接添加到最后。
    }
    return res;
}
};
