class Solution {
public:
    int maxSumDivThree(vector<int>& nums) {
        set<int> path;
        dfs(nums, 0, 0, path);
        int result = *max_element(path.begin(), path.end());
        //for(auto &i:path)
        //    cout<<i<<",";
        return result;
    }
private:
    void dfs(vector<int>& nums, int sum, int start, set<int>& path){
        if(start>=nums.size()) {
            if(sum % 3 == 0) path.insert(sum);
            return;
        }
        if(sum % 3 == 0) path.insert(sum);
        dfs(nums, sum, start+1, path);
        dfs(nums, sum+nums[start], start+1, path);
    }
};

/*
不妨设dp[i] 代表 选取的数字累加和 模3 = i 的数字和
假定nums[i] % 3 = 1 ，那么，和 前面选取的数字和模 3 = 2 的数相加，就可以模3为 0 ，表达起来就是 dp[0] = max(dp[0], nums[i] + dp[2])
依次类推，只要不断更新 dp 数组即可，注意一点，更新的时候要保存上一个状态的值，避免后续更新的时候重复影响。
*/
class Solution {
public:
    int maxSumDivThree(vector<int>& nums) {
        int dp[3] = {0, 0, 0};
        
        for (int i = 0; i < nums.size(); ++i) {
            int mod = nums[i] % 3;

            int a = dp[(3 + 0 - mod) % 3];
            int b = dp[(3 + 1 - mod) % 3];
            int c = dp[(3 + 2 - mod) % 3];
            
            if (a || mod == 0) dp[0] = std::max(dp[0], a + nums[i]);
            if (b || mod == 1) dp[1] = std::max(dp[1], b + nums[i]);
            if (c || mod == 2) dp[2] = std::max(dp[2], c + nums[i]);
        }
        return dp[0];
    }
};
