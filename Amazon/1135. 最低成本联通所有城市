bool cmp(vector<int> &a, vector<int> &b) {
    return a[2] < b[2];
}
class Solution {
public:

    int minimumCost(int N, vector<vector<int>>& connections) {
        if (connections.size() + 1 < N) return -1;
        sort(connections.begin(), connections.end(), cmp);
        int count = 0;
        vector<int> parent(N+1);
        int ans = 0;
        for (int i=0; i<=N; i++) {
            parent[i] = i;
        }
        for (int i=0; i<connections.size(); i++) {
            int parent0 = findParent(parent, connections[i][0]);
            int parent1 = findParent(parent, connections[i][1]);
            if (parent0 != parent1) {
                ans += connections[i][2];
                parent[parent1] = parent0;
                if (++count == N-1) return ans;
            }
        }
        return -1;
    }
private:
    int findParent(vector<int> &parent, int i) {
        while (parent[i] != i) {
            i = parent[i];
        }
        return i;
    }
    

};
